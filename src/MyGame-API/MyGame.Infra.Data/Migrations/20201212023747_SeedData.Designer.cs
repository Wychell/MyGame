// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyGame.Infra.Data.Context;

namespace MyGame.Infra.Data.Migrations
{
    [DbContext(typeof(MyGameContext))]
    [Migration("20201212023747_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyGame.Domain.Entities.Friend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Friend");

                    b.HasData(
                        new
                        {
                            Id = new Guid("603c8ac5-2fc5-491f-9fb4-0924320b4301"),
                            CreateDate = new DateTime(2020, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "amigo@gmail.com",
                            Name = "Amigo da Onça",
                            Phone = "333333",
                            UserId = new Guid("7b154c78-d523-48f9-b0b0-7b9b9e9cc65f")
                        },
                        new
                        {
                            Id = new Guid("dfb45e41-045d-4fdd-a408-2bba3d98b890"),
                            CreateDate = new DateTime(2020, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cobra@gmail.com",
                            Name = "Amigo da Cobra",
                            Phone = "444444",
                            UserId = new Guid("7b154c78-d523-48f9-b0b0-7b9b9e9cc65f")
                        });
                });

            modelBuilder.Entity("MyGame.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Game");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21eaa1fa-bdf4-496a-85ac-ce21da56cff9"),
                            CreateDate = new DateTime(2020, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Esporte",
                            Name = "FIFA 21"
                        },
                        new
                        {
                            Id = new Guid("7eef25b8-ffd4-4b59-b183-edf36dc33d2a"),
                            CreateDate = new DateTime(2020, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Aventura",
                            Name = "GTA V"
                        });
                });

            modelBuilder.Entity("MyGame.Domain.Entities.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("GameId");

                    b.ToTable("Loan");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7394a7a-358c-4d30-ac79-86725ce2cbb0"),
                            CreateDate = new DateTime(2020, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FriendId = new Guid("603c8ac5-2fc5-491f-9fb4-0924320b4301"),
                            GameId = new Guid("21eaa1fa-bdf4-496a-85ac-ce21da56cff9")
                        },
                        new
                        {
                            Id = new Guid("4cc3e40d-b70e-4258-997b-c51abe6b26fc"),
                            CreateDate = new DateTime(2020, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FriendId = new Guid("dfb45e41-045d-4fdd-a408-2bba3d98b890"),
                            GameId = new Guid("7eef25b8-ffd4-4b59-b183-edf36dc33d2a")
                        });
                });

            modelBuilder.Entity("MyGame.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b154c78-d523-48f9-b0b0-7b9b9e9cc65f"),
                            CreateDate = new DateTime(2020, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mychell.mds@gmail.com",
                            Name = "Mychell",
                            Password = "password"
                        });
                });

            modelBuilder.Entity("MyGame.Domain.Entities.Friend", b =>
                {
                    b.HasOne("MyGame.Domain.Entities.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyGame.Domain.Entities.Loan", b =>
                {
                    b.HasOne("MyGame.Domain.Entities.Friend", "Friend")
                        .WithMany("Loans")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyGame.Domain.Entities.Game", "Game")
                        .WithMany("Loans")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
